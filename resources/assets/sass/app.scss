@import "variables";

.breadcrumbs {
	// relative positioning helps calculate responsiveness
	display:flex;position:relative;

	&.overflowed {
		justify-content:flex-end;overflow:hidden;

		&:after {
			background:linear-gradient(to right, $mainbackground 0%, transparent 100%);bottom:0;content:'';left:0;position:absolute;top:0;width:5%;
		}
	}

	a {
		margin:0;text-decoration:none;

		&:before {
			content:'/';margin:0 0.7rem;text-decoration:none;
		}

		&:first-child:before {
			margin-left:0;
		}
	}
}

.folderlist {
	list-style:none;margin-left:-0.5%;padding:0;

	li {
		margin:0.5%;width:99%;
	}

	a {
		align-items:center;background:$header;display:flex;height:60px;justify-content:center;padding:5px;position:relative;text-align:center;text-decoration:none;
	}

	img {
		display:inline-block;max-height:60px;max-width:100%;
	}

	.replaced-image {
		line-height:60px;
	}
}

label {
	display:block;font-weight:bold;line-height:1em;
}

input:not([type='checkbox']) {
	background:none;border:1px solid $border;box-sizing:border-box;height:3rem;padding:0 1rem;width:100%;

	&.is-invalid {
		border-color:$redtext;
	}
}

.fieldwrapper {
	position:relative;

	input:first-child {
		margin-top:2em;
	}

	input + label {
		margin:0;position:absolute;top:0.5em;transition:all 0.3s;
	}

	// don't need to test support because invalid selector is skipped right
	// also relies on placeholder attribute on input even if empty
	// see also https://callmenick.com/dev/floated-labels-with-placeholder-shown/
	input:placeholder-shown + label {
		left:1rem;top:3em;
	}
}

.toggle {
	background:$text;border-radius:10px;cursor:pointer;display:block;height:10px;position:relative;width:40px;

	input {
		display:none;
	}

	.helper {
		background:$text;border-radius:20px;box-shadow:0 0 10px $bigbackground;height:20px;left:-5px;margin:0;position:absolute;top:-5px;transition:all 0.5s;width:20px;
	}

	input:checked + .helper {
		background:$greenback;left:calc(100% - 12px);
	}

	input[disabled] + .helper {
		background:black;
	}
}

.invalid-feedback strong {
	color:$redtext;
}

ul {
	padding-left:1em;
}

.buttons {
	justify-self:end;margin-top:auto;
}

button,.button {
	background:$header;border:1px solid $border;box-sizing:border-box;cursor:pointer;height:3rem;margin-top:2rem;text-align:center;width:100%;
}

a.button {
	display:block;line-height:3rem;text-decoration:none;
}

dt {
	font-weight:bold;margin-top:2rem;
}

.a-code-header {
	align-items:center;display:flex;flex-direction:row-reverse;justify-content:space-between;

	> * {
		margin:0;
	}

	img {
		max-height:60px;max-width:30%;
	}

	h1 {
		line-height:60px;

		&:only-child {
			flex-grow:1; // fill the space to cancel out the reversed row
		}
	}
}

.text-center {
	text-align:center;
}

.code-and-timer {
	margin-top:2rem;position:relative;
}

.a-code {
	// leave spacing and indenting as ems
	font-size:16vw;letter-spacing:0.3em;text-indent:0.3em;

	@media (min-width:500px) {
		font-size:5rem;
	}
}

.a-timer {
	--progress: 0;

	height:3rem;margin:4rem auto;opacity:0;position:relative;transition:opacity 0.4s;width:calc(0.6667 * 3rem);

	&:before,&:after {
		content:'';left:5%;position:absolute;right:5%;z-index:1;
	}

	&:before {
		background:$text;bottom:50%;height:calc((100 - var(--progress)) * 0.5%);
	}

	&:after {
		background:$bigbackground;bottom:0;height:calc(var(--progress) * 0.5%);
	}

	.hourglass svg {
		height:100%;position:absolute;width:100%;z-index:2;
	}
}

.js-copy {
	opacity:0;transition:all 0.4s;

	&.enabled {
		opacity:1;
	}

	&.success {
		background-color:$greenback;
	}

	&.failure {
		background-color:$redback;
	}
}

.export {
	margin-top:2rem;

	svg {
		display:block;max-width:100%;margin:0 auto;
	}
}

.blueback {
	background:$blueback;
}
.greenback {
	background:$greenback;
}
.redback {
	background:$redback;
}
