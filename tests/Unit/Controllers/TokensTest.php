<?php
namespace Tests\Unit\Controllers;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Token;
use App\Helpers\Encryption;
use App\Models\User;

class TokensTest extends TestCase
{
    use RefreshDatabase;

    private static $encryptionsalt = 'lsngmym1nd';
    private static $totpsecret = '74ZHUVE5JW4Y3HKX'; // secret generated by totp provider
    private $token;

    /**
     * Prepare to test token pages
     */
    public function setUp()
    {
        // alter env before running setup
        putenv('ENCRYPTION_SALT=' . self::$encryptionsalt);
        putenv('READ_ONLY=false'); //avoid conflict

        parent::setUp();

        // this session put applies to all acting as calls below
        session()->put('encryptionkey', Encryption::makeKey('wish somebody would'));

        $this->token = factory(Token::class)->make();
        $this->token->secret = Encryption::encrypt(self::$totpsecret);
        $this->token->save(); // for hashed id test
    }

    /**
     * Make sure a user can see a list of their tokens
     *
     * @return void
     */
    public function testListTokens()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.code'));

        $response->assertStatus(200);
        $response->assertViewIs('tokens.list');
    }

    /**
     * Make sure a user can see the totp code for a token
     *
     * @return void
     */
    public function testViewToken()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.code', [$this->token->path]));

        $response->assertStatus(200);
        $response->assertViewIs('tokens.code');
    }

    /**
     * Make sure a user gets a 404 page if a token cannot be found
     *
     * @return void
     */
    public function testViewNotAToken()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.code', ['notatoken']));

        $response->assertStatus(404);
    }

    /**
     * Make sure a user can see export a token
     *
     * @return void
     */
    public function testExportToken()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.export', [$this->token->path]));

        $response->assertStatus(200);
        $response->assertViewIs('tokens.export');
    }

    /**
     * Ensure a user has a chance to create a new token
     *
     * @return void
     */
    public function testCreateToken()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.create'));

        $response->assertStatus(200);
        $response->assertViewIs('tokens.form');
    }

    /**
     * Ensure a user can see the details of a token
     *
     * @return void
     */
    public function testTokenViewPage()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.show', [$this->token->id_hash]));

        $response->assertStatus(200);
        $response->assertViewIs('tokens.show');
    }

    /**
     * Ensure a user has a chance to edit the token details
     *
     * @return void
     */
    public function testTokenEditPage()
    {
        $response = $this->actingAs($this->token->user)
            ->get(route('tokens.edit', [$this->token->id_hash]));

        $response->assertStatus(200);
        $response->assertViewIs('tokens.form');
    }
}
